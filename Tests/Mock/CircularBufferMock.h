#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <mutex>
#include "CircularBuffer.h"

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template <typename DATA_TYPE, const uint16_t LEN_MAX>
class CircularBufferMock : public CircularBuffer<CircularBufferMock <DATA_TYPE, LEN_MAX>, DATA_TYPE, LEN_MAX>
{
    static constexpr char * Module = (char *)"CircularBufferMock";
    friend CircularBuffer<CircularBufferMock <DATA_TYPE, LEN_MAX>, DATA_TYPE, LEN_MAX>;

    public:
        CircularBufferMock () = default;
        ~CircularBufferMock () = default;

        void      Add    (const DATA_TYPE & vData) { }
        void      Clear  (void)                    { }

        DATA_TYPE Remove (void)                    { return DATA_TYPE (); }

    private:
        std::mutex mutex;

        bool lock (void)
        {
            mutex.try_lock ();
            return true;
        }
        void unlock (void) { mutex.unlock (); }
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
